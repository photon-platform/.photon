#!/usr/bin/env bash

function git_agent() {
  if [ -z "$SSH_AUTH_SOCK" ]; then
     # eval "$(ssh-agent -s)"
     eval `ssh-agent`
     ssh-add ~/.ssh/id_ed25519
  fi
}

function docs_build() {
  @
  cd docsrc
  sphinx-apidoc -o source ../geometor -f 
  make github
  open ../docs/index.html
}
alias db=docs_build


function trash() {
  hr
  ui_banner "TRASH $SEP $@"
  echo

  if [[ "$( ask_truefalse "continue" )" == "true" ]]; then
    gio trash $@
  fi
}

function ablog_build() {
  @
  tools_git
  ablog clean
  ablog build
  cp CNAME docs/CNAME
  ablog serve
}
alias abb=ablog_build

function log() {
  @
  python -m photonplatform.logger.logger
  cd log
  tools_git
  cd -
}


function bk() {
  gnome-terminal --working-directory=$PWD -- bash -c "source ~/.bashrc; backup; exec bash"
  
}
function ranger_dir() {
  ranger --choosedir=$HOME/.rangerdir
  LASTDIR=`cat $HOME/.rangerdir`
  cd "$LASTDIR"
}
alias rd=ranger_dir

function apt_upgrade() {
  sudo apt update -y
  sudo apt list --upgradeable
  read -n1 -p "run upgrade?" run_upgrade
  if [[ $run_upgrade == "y" ]]; then
    sudo apt upgrade -y
    sudo apt autoremove -y
  fi
}

convertsecstohours() {
  d=${1%.*}
  h=$(( ${d}/3600 ))
  m=$(( (${d}%3600)/60 ))
  s=$(( ${d}%60 ))
  printf "%02d:%02d:%02d\n" $h $m $s
}

convertsecstomin() {
  ((m=${1}/60))
  ((s=${1}%60))
  printf "%02d:%02d\n" $m $s
}

function elapsed_time() {
  END_TIME="$(date -u +%s)"
  ELAPSED="$(($END_TIME-$1))"
  TIME=$(convertsecstomin $ELAPSED)

  echo "elapsed: ${txBold}$TIME${txReset} m:s"
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_"
}

function logstamp() {
  date +"%y.%j-%H%M%S"
}

function timestamp() {
  date +"%Y%m%d-%H%M%S"
}

function cp_bak() {
  if [[ -f $1 ]]; then
    cp $1 $1.$(timestamp)
  fi
}

function mv_bak() {
  if [[ -f $1 ]]; then
    mv $1 $1.$(timestamp)
  fi
}

# Find and open in Vim
function vf() {
  # files=$( list_text_files | sort | fzf )
  mapfile -t files < <( list_text_files | sort | fzf )
  files_list=""
  for f in "${files[@]}"; do
    files_list+="\"${f}\" "
  done

  if [[ $files_list ]]; then
    eval vim $files_list
  fi
}

function vr() {
  # files=$( list_recent | fzf )
  # mapfile -d \0 -t files < <( list_recent | fzf --print0 )
  mapfile -t files < <( list_recent | fzf  )
  files_list=""
  for f in "${files[@]}"; do
    files_list+="\"${f}\" "
  done

  # echo "${files[@]}"
  # echo $files_list
  # pause_any

  if [[ $files_list ]]; then
    eval vim $files_list
  fi
}

function zd() {
  cd "$(find . -type d | fzf)"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}";
  local ip="localhost"
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}";
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -RNX;
}

# list and remove orphaned vim swp files
function swp() {
  ls -a *.sw? .*.sw?
  read -p "delete files? [Y]" CHECK
  if [[ "$CHECK" == "Y" ]]
  then
    rm *.sw? .*.sw?
  else
    echo "abort"
  fi
}

# https://gist.github.com/oneohthree/f528c7ae1e701ad990e6
function slugify() {
  # TODO: fix translation
  # sed -E 's/[^a-zA-Z0-9]+/-/g' |\
  echo "$1" |\
    iconv -t ascii//TRANSLIT |\
    sed -E 's/[~\^]+//g' |\
    sed -E 's/[ ]+/-/g' |\
    sed -E 's/^-+\|-+$//g' |\
    sed -E 's/^-+//g' |\
    sed -E 's/-+$//g' |\
    tr A-Z a-z
}

function newsh() {
  scriptname=$1
  if [[ -z $scriptname ]]
  then
    read -p "script name: " scriptname
  fi
  echo '#!/usr/bin/env bash' > $scriptname.sh
  chmod +x $scriptname.sh
  vim $scriptname.sh
}

function untar() {
  tgz="$1"
  folder="${tgz%.tgz}"
  mkdir -p "$folder"
  tar -xf "$tgz" -C "$folder"
}
  
  

